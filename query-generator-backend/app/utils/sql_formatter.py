"""
SQL formatting utilities
"""
import re
from typing import Optional


def format_sql(sql: str, add_comment: bool = True) -> str:
    """
    Format SQL with proper indentation and optional comment header.
    
    Args:
        sql: Raw SQL string
        add_comment: Whether to add "-- generated by QG" comment
        
    Returns:
        Formatted SQL string
    """
    if not sql or not sql.strip():
        return sql
    
    # Remove extra whitespace and normalize
    sql = re.sub(r'\s+', ' ', sql.strip())
    
    # First, identify and protect WHERE clauses by temporarily replacing them
    where_clauses = []
    def replace_where(match):
        where_clauses.append(match.group(0))
        return f"__WHERE_PLACEHOLDER_{len(where_clauses)-1}__"
    
    # Find WHERE clauses that are not part of subqueries in ON conditions
    formatted_sql = re.sub(
        r'\s+WHERE\s+(?![^()]*\))', 
        replace_where, 
        sql, 
        flags=re.IGNORECASE
    )
    
    # Format SELECT clause
    formatted_sql = re.sub(
        r'SELECT\s+', 
        'SELECT\n    ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Format column separators in SELECT
    formatted_sql = re.sub(
        r',\s*(?=\w)', 
        ', \n    ', 
        formatted_sql
    )
    
    # Format FROM clause
    formatted_sql = re.sub(
        r'\s+FROM\s+', 
        '\nFROM ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Format JOIN clauses
    formatted_sql = re.sub(
        r'\s+((?:INNER\s+|LEFT\s+|RIGHT\s+|FULL\s+)?JOIN)\s+', 
        r'\n    \1 ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Format ON clauses (indent more for JOIN conditions)
    formatted_sql = re.sub(
        r'\s+ON\s+', 
        '\n        ON ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Restore WHERE clauses with proper formatting
    for i, where_clause in enumerate(where_clauses):
        placeholder = f"__WHERE_PLACEHOLDER_{i}__"
        formatted_where = re.sub(r'\s+WHERE\s+', '\nWHERE ', where_clause, flags=re.IGNORECASE)
        formatted_sql = formatted_sql.replace(placeholder, formatted_where)
    
    # Format AND/OR in WHERE clause
    formatted_sql = re.sub(
        r'\s+(AND|OR)\s+', 
        r'\n    \1 ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Format GROUP BY clause
    formatted_sql = re.sub(
        r'\s+GROUP\s+BY\s+', 
        '\nGROUP BY ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Format HAVING clause
    formatted_sql = re.sub(
        r'\s+HAVING\s+', 
        '\nHAVING ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Format ORDER BY clause
    formatted_sql = re.sub(
        r'\s+ORDER\s+BY\s+', 
        '\nORDER BY ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Format LIMIT clause (keep on same line as previous clause)
    formatted_sql = re.sub(
        r'\s+LIMIT\s+', 
        ' LIMIT ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Format OFFSET clause
    formatted_sql = re.sub(
        r'\s+OFFSET\s+', 
        ' OFFSET ', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Clean up extra spaces around parentheses
    formatted_sql = re.sub(r'\s*\(\s*', '(', formatted_sql)
    formatted_sql = re.sub(r'\s*\)\s*', ')', formatted_sql)
    
    # Fix column list formatting in SELECT (handle AS aliases)
    formatted_sql = re.sub(
        r', \n    (\w+\.\w+|\w+)\s*AS\s+(\w+)', 
        r', \n    \1 AS \2', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Fix spacing around functions like COUNT(*)
    formatted_sql = re.sub(
        r'(\w+)\s*\(\s*([^)]*)\s*\)\s*AS\s+(\w+)', 
        r'\1(\2) AS \3', 
        formatted_sql, 
        flags=re.IGNORECASE
    )
    
    # Add comment header if requested
    if add_comment:
        formatted_sql = f"-- Generated by QG\n{formatted_sql}"
    
    return formatted_sql


def format_sql_simple(sql: str) -> str:
    """
    Simple SQL formatting for basic queries.
    
    Args:
        sql: Raw SQL string
        
    Returns:
        Formatted SQL string with comment
    """
    return format_sql(sql, add_comment=True)
